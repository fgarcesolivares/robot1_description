<?xml version="1.0"?>
<launch>
	<rosparam file="$(find robot1_description)/config/robot1_gazebo_control_Position.yaml" command="load"/>
	 
	 <!-- these are the arguments you can pass this launch file, for example paused:=true -->
	  <arg name="model" default="$(find robot1_description)/urdf/robot1.xacro"/>
	  <arg name="paused" default="true"/>
	  <arg name="use_sim_time" default="false"/>
	  <arg name="headless" default="false"/>
	  <arg name="debug" default="true"/>
  	<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
	    <arg name="world_name" value="$(find robot1_description)/socro.world"/>
	    <arg name="debug" value="$(arg debug)" />
	    <arg name="paused" value="$(arg paused)"/>
	    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
	    <arg name="headless" value="$(arg headless)"/>
	</include>
	
	<param name="robot_description" command="/opt/ros/noetic/bin/xacro $(find robot1_description)/urdf/robot1.xacro"/>
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
	
	<!-- load the controllers -->
  	<node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
	output="screen" ns="/robot1_description" args="joint_state_controller
					  joint1_position_controller
					  joint2_position_controller
					  joint3_position_controller
					  joint4_position_controller
					  joint5_position_controller
					  joint6_position_controller"/>
					  
	<!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
   	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model robot1_description -param robot_description -z 0"/>
</launch>
